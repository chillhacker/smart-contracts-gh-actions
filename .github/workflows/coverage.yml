name: Run Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install

  run-coverage:
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install

      - name: Install lcov-summary
        run: npm install -g lcov-summary

      - name: Run Coverage
        run: npx hardhat coverage

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/*

      - name: List coverage directory
        run: |
          ls -R coverage || echo "Coverage directory not found"

      - name: Output Coverage Summary
        id: coverage_summary
        run: |
          if [ -f coverage/coverage-summary.txt ]; then
            echo "Coverage summary:"
            cat coverage/coverage-summary.txt
          else
            echo "No summary available"
          fi

      - name: Output Coverage Summary
        run: |
          lcov-summary coverage/lcov.info

      - name: Prune coverage report
        run: lcov --remove ./coverage/lcov.info -o ./lcov.info.pruned 'src/test/*' 'scripts/*' --ignore-errors inconsistent

      - name: View Coverage (text here)
        id: print_coverage
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "comment_contents<<$EOF" >> $GITHUB_OUTPUT
          lcov --list ./lcov.info.pruned --ignore-errors inconsistent >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Log Coverage Report
        run: echo "${{ steps.print_coverage.outputs.comment_contents }}"
